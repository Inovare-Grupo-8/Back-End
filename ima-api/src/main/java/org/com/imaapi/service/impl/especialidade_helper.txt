private void atualizarEspecialidadesVoluntario(Voluntario voluntario, String especialidadePrincipal, List<String> especialidadesAdicionais) {
    // Buscar ou criar a especialidade principal
    Especialidade especialidadePrincipalEntity = especialidadeRepository.findByNome(especialidadePrincipal)
        .orElseGet(() -> {
            Especialidade novaEspecialidade = new Especialidade();
            novaEspecialidade.setNome(especialidadePrincipal);
            return especialidadeRepository.save(novaEspecialidade);
        });

    // Remover todas as especialidades antigas
    voluntarioEspecialidadeRepository.deleteByVoluntario(voluntario);

    // Adicionar a especialidade principal
    VoluntarioEspecialidade principalVE = new VoluntarioEspecialidade();
    principalVE.setVoluntario(voluntario);
    principalVE.setEspecialidade(especialidadePrincipalEntity);
    principalVE.setPrincipal(true);
    voluntarioEspecialidadeRepository.save(principalVE);

    // Adicionar especialidades adicionais
    if (especialidadesAdicionais != null && !especialidadesAdicionais.isEmpty()) {
        for (String nomeEspecialidade : especialidadesAdicionais) {
            if (!nomeEspecialidade.equals(especialidadePrincipal)) {
                Especialidade especialidade = especialidadeRepository.findByNome(nomeEspecialidade)
                    .orElseGet(() -> {
                        Especialidade novaEspecialidade = new Especialidade();
                        novaEspecialidade.setNome(nomeEspecialidade);
                        return especialidadeRepository.save(novaEspecialidade);
                    });

                VoluntarioEspecialidade ve = new VoluntarioEspecialidade();
                ve.setVoluntario(voluntario);
                ve.setEspecialidade(especialidade);
                ve.setPrincipal(false);
                voluntarioEspecialidadeRepository.save(ve);
            }
        }
    }
}
